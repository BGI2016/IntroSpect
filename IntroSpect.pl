#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Cwd 'abs_path';
use File::Basename;
use feature qw(say);

##set bin path
my $BinPath=dirname(__FILE__);

##define parameters
my $ss;
my $pep;
my $prefix;
my $outdir;
my $minLen;
my $maxLen;

my $minNum;
my $cutoff;

my $GC;
my $GCmotif;
my $GCmotifLen;

##get options
my $current_path=$ENV{"PWD"};
my $usage = "\n\n$0 [options] \n

Usage: 
	a motif-guided immunopeptidomic database search method to increase the sensitivity of MHC ligand identification.
	Input: high confidence peptides and unspecific search space
	Output: motif-guided search space
	(eg. perl $0 -ss ssfile -pep pepfile -prefix prefix -GC GCpath)
	
Version:
	Version: 1.0	Date: 202004	Author: zhanglesolanin\@foxmail.com


Options:
##	Global options
	-ss			ss file generated by DB2SS.pl (STRING)
	-pep			input high confidence peptide sequences (STRING)
	-prefix			output file prefix (STRING)
	-outdir			*output file directory [default:./] (STRING)
	-minLen			*min length of peptides [default:9] (INT)
	-maxLen			*max length of peptides [default:11] (INT)
	
##	GibbsCluster options
	-GC			gibbscluster path (STRING)
	-GCmotif		*number of possible MHC specificities [default:1-6] (INT-INT)
	-GCmotifLen		*motif length [default:9] (INT)
	
##	PSSM options
	-minNum			*min size of each training set [default:80] (INT)
	-Cutoff			*PSSM score cutoff [default:0.3] (FLOAT)

	-help			Show this message
	
	Parameters marked with * have default values and in most cases do not need to be entered at the command line.
	
	
Requirements:
- Perl (http://www.perl.org/get.html)
- Perl modules used at the beginning of this script
- GibbsCluster (https://services.healthtech.dtu.dk/service.php?GibbsCluster-2.0)

See README for more information.
";

GetOptions(
	'ss=s'					=>\$ss,
	'pep=s'					=>\$pep,
	'prefix=s'				=>\$prefix,
	'outdir'				=>\$outdir,
	'minLen=i'				=>\$minLen,
	'maxLen=i'				=>\$maxLen,
	'GC=s'					=>\$GC,
	'GCmotif=s'				=>\$GCmotif,
	'GCmotifLen=i'			=>\$GCmotifLen,
	'minNum=i'				=>\$minNum,
	'cutoff=f'				=>\$cutoff,
	help					=> sub { pod2usage($usage); },
) or die($usage);

##check input
unless($ss or $pep or $prefix or $GC){
	die $usage;
}

unless($ss){
    die "Provide a search soace list file (.ss generated by DB2SS.pl) to perform MIDS, -ss <ssfile> -pep <pepfile> -prefix <prefix> -GC <GCfile>" , $usage;
}
$ss="$current_path/$ss" unless($ss=~/^\//);

unless($pep){
    die "Provide a ss file to perform MIDS, -ss <ssfile> -pep <pepfile> -prefix <prefix> -GC <GCfile>" , $usage;
}
$pep="$current_path/$pep" unless($pep=~/^\//);

unless($prefix){
    die "Provide a ss file to perform MIDS, -ss <ssfile> -pep <pepfile> -prefix <prefix> -GC <GCfile>" , $usage;
}

unless($GC){
    die "Provide a ss file to perform MIDS, -ss <ssfile> -pep <pepfile> -prefix <prefix> -GC <GCfile>" , $usage;
}
$GC="$current_path/$GC" unless($GC=~/^\//);

##default parameters
$outdir="./" unless(defined($outdir));
$outdir="$current_path/$outdir" unless($outdir=~/^\//);
$minLen=9 unless(defined($minLen));
$maxLen=11 unless(defined($maxLen));
$GCmotif="1-6" unless(defined($GCmotif));
$GCmotifLen=9 unless(defined($GCmotifLen));
$minNum=80 unless(defined($minNum));
$cutoff=0.3 unless(defined($cutoff));

##make directory
say "--- Make directorys...";
system "mkdir -p $outdir/0.shell" unless(-d "$outdir/0.shell");
system "mkdir -p $outdir/1.cluser" unless(-d "$outdir/1.cluser");
system "mkdir -p $outdir/2.pssm" unless(-d "$outdir/2.pssm");
system "mkdir -p $outdir/3.result" unless(-d "$outdir/3.result");

##make shell
say "--- Prepare shell...";
open(SH1, "> $outdir/0.shell/A.Peptides_Cluster.sh") or die $!;
print SH1 "perl $BinPath/bin/A.Peptides_Cluster.pl -file $pep -outdir $outdir/1.cluser/ -minLen $minLen -maxLen $maxLen -prefix $prefix -gc $GC -GCmotif $GCmotif -GCmotifLen $GCmotifLen\n";
close SH1;

open(SH2, "> $outdir/0.shell/B.TrainingSet_Preparation.sh") or die $!;
print SH2 "perl $BinPath/bin/B.TrainingSet_Preparation.pl -gcdir $outdir/1.cluser/$prefix.${minLen}-${maxLen}mer/$prefix.${minLen}-${maxLen}mer* -outdir $outdir/2.pssm/ -prefix $prefix\n";
close SH2;

open(SH3, "> $outdir/0.shell/C.Motif_Learning.sh") or die $!;
print SH3 "perl $BinPath/bin/C.Motif_Learning.pl -file $outdir/2.pssm/$prefix.trainingSet.txt -outdir $outdir/2.pssm/ -MinNum $minNum -prefix $prefix\n";
close SH3;

open(SH4, "> $outdir/0.shell/D.SearchSpace_Filtering.sh") or die $!;
print SH4 "perl $BinPath/bin/D.SearchSpace_Filtering.pl -pep $pep -ss $ss -outdir $outdir/3.result/ -pssm $outdir/2.pssm/$prefix.pssm_file.list -minLen $minLen -maxLen $maxLen -prefix $prefix\n";
close SH4;

open(SH0, "> $outdir/0.shell/RUNALL.sh") or die $!;
say SH0 "date";
say SH0 'echo "Runing A.Peptides_Cluster.sh"';
say SH0 "sh $outdir/0.shell/A.Peptides_Cluster.sh";
say SH0 'echo "Runing B.TrainingSet_Preparation.sh"';
say SH0 "sh $outdir/0.shell/B.TrainingSet_Preparation.sh";
say SH0 'echo "Runing C.Motif_Learning.sh"';
say SH0 "sh $outdir/0.shell/C.Motif_Learning.sh";
say SH0 'echo "Runing D.SearchSpace_Filtering.sh"';
say SH0 "sh $outdir/0.shell/D.SearchSpace_Filtering.sh";
say SH0 "date";
close SH0;

#system("sh $out/0.shell/RUNALL.sh");

